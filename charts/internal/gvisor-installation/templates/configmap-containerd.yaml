apiVersion: v1
kind: ConfigMap
metadata:
  name: containerd-gvisor-{{ .Values.config.workergroup }}
  namespace: kube-system
data:
  install-gvisor-containerd.sh: |-
    #!/bin/sh
    BIN_TARGET_DIR="{{ .Values.config.binFolder }}"
    RESTART_CONTAINERD=false

    mkdir -p "/var/host/$BIN_TARGET_DIR"

    cd /var/content

    TARGET_RUNSC="/var/host/$BIN_TARGET_DIR/runsc"
    if [ ! -f "$TARGET_RUNSC" ]; then
      echo "Adding gVisor binary."
      chmod +x runsc
      mv runsc "$TARGET_RUNSC"
    elif diff runsc "$TARGET_RUNSC"  > /dev/null; then
      echo "gVisor binary up to date."
    else
      echo "Updating gVisor binary."
      chmod +x runsc
      mv runsc "$TARGET_RUNSC"
    fi

    TARGET_SHIM="/var/host/$BIN_TARGET_DIR/containerd-shim-runsc-v1"
    if [ ! -f "$TARGET_SHIM" ]; then
      echo "Adding shim binary."
      chmod +x containerd-shim-runsc-v1
      mv containerd-shim-runsc-v1 "$TARGET_SHIM"
    elif diff containerd-shim-runsc-v1 "$TARGET_SHIM"  > /dev/null; then
      echo "Shim binary up to date."
    else
      echo "Updating shim binary."
      chmod +x containerd-shim-runsc-v1
      # shim is a long running process. Will only use new shim, when old shim stopped.
      # killing the shim is not an option, as it kills its containers
      mv containerd-shim-runsc-v1 "$TARGET_SHIM"
    fi

    # configuring containerd config file for gVisor
    FILENAME=/var/host/etc/containerd/config.toml
    if ! grep -q containerd.runtimes.runsc "$FILENAME"; then
      echo "Configuring containerd config file for gVisor."

      # version 1 is the default version if there is no version header, ref: https://containerd.io/releases/#daemon-configuration
      # version 2 and version 3 syntax must be announced by their version header
      if grep -q '^version.*=.*3$' "$FILENAME"; then
        cri_runtime_path="plugins.\"io.containerd.cri.v1.runtime\".containerd.runtimes.runsc"
      elif grep -q '^version.*=.*2$' "$FILENAME"; then
        cri_runtime_path="plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runsc"
      else
        cri_runtime_path="plugins.cri.containerd.runtimes.runsc"
      fi

      cat <<EOF >> $FILENAME
    
    [$cri_runtime_path]
      runtime_type = "io.containerd.runsc.v1"
    EOF

      # restart containerd as no gvisor runtime was configured before
      RESTART_CONTAINERD=true
    else
      echo "Containerd already configured for gvisor."
    fi

    runsc_options_path="$cri_runtime_path.options"
    if ! grep -q "$runsc_options_path" "$FILENAME"; then
      cat <<EOF >> $FILENAME
    
    [$runsc_options_path]
      TypeUrl = "io.containerd.runsc.v1.options"
      ConfigPath = "/etc/containerd/runsc.toml"
    EOF
      RESTART_CONTAINERD=true
    fi

    if [ ! -f /var/host/etc/containerd/runsc.toml ]; then
      cat <<EOF > /var/host/etc/containerd/runsc.toml
    [runsc_config]
    EOF
    fi

    RUNSC_TOML_MD5SUM_INITIAL=$(md5sum /var/host/etc/containerd/runsc.toml)
     
    cat <<EOF > /var/host/etc/containerd/runsc.toml
    [runsc_config]
{{ .Values.config.configFlags | indent 6 }}
    EOF

    # Restart containerd if runsc.toml was updated
    RUNSC_TOML_MD5SUM_FINAL=$(md5sum /var/host/etc/containerd/runsc.toml)
    if [ "$RUNSC_TOML_MD5SUM_INITIAL" != "$RUNSC_TOML_MD5SUM_FINAL" ]; then
      echo "runsc.toml updated."
      RESTART_CONTAINERD=true
    fi

    if [ "$RESTART_CONTAINERD" = true ]; then
      echo "Restarting containerd."
      chroot /var/host bash -c "systemctl restart containerd"
    fi

    echo "Task completed, sleeping ..."
    while true; do
      sleep 3600;
    done
